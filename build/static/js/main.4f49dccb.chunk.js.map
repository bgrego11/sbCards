{"version":3,"sources":["Events.js","App.js","Game/Game.js","Home/Home.js","Profile/Profile.js","Callback/Callback.js","history.js","Auth/auth0-variables.js","routes.js","Auth/Auth.js","serviceWorker.js","index.js"],"names":["module","exports","COMMUNITY_CHAT","USER_CONNECTED","MESSAGE_RECIEVED","MESSAGE_SENT","USER_DISCONNECTED","TYPING","VERIFY_USER","LOGOUT","PRIVATE_MESSAGE","NEW_CHAT_USER","GAME_UPDATE","CURRENTPLAYS","App","route","this","props","history","replace","concat","auth","login","logout","isAuthenticated","react_default","a","createElement","className","onClick","bind","id","goTo","Component","Game","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","initSocket","socket","on","game","setState","currentUsers","names","setUser","user","state","emit","console","log","name","deal","blackCards","decks","whiteCards","gameInProgress","numOfPlayers","length","playersObj","blackMax","blackSelect","Math","floor","random","currentText","text","currentPick","pick","i","j","_ref","playerCardsArray","slice","splice","push","picture","cardsInHand","score","bcardPick","bCard","dealer","turn","players","playcard","index","winner","numPicks","newCards","playerChecker","cardsinplay","playerIndex","cardOwner","hasPlayedCard","pCheckIdx","updateScore","player","k","playerScore","map","x","playerName","smoke","cards","handleSubmit","assertThisInitialized","handleChange","event","preventDefault","e","userInput","target","value","_this2","mySocketID","pickACard","pickedCard","key","nonDealerPicks","scoreKeeper","currentCards","card","white","heading","src","alt","inGamePlayers","Home","socketUser","axios","get","headers","Authorization","localStorage","access_token","then","response","profile","data","checkstate","allPlayers","io","plays","removeUserArr","_this3","Game_Game_Game","Profile","_this$props$auth","userProfile","getProfile","err","Panel","header","ControlLabel","Glyphicon","glyph","nickname","JSON","stringify","Callback","createHistory","AUTH_CONFIG","domain","clientId","callbackUrl","Auth","auth0","WebAuth","clientID","redirectUri","responseType","scope","handleAuthentication","authorize","parseHash","authResult","accessToken","idToken","setSession","alert","error","cb","client","userInfo","expiresAt","expiresIn","Date","getTime","setItem","removeItem","parse","getItem","Boolean","window","location","hostname","match","routes","Router","Route","path","render","src_App_0","assign","src_Home_Home","Redirect","to","src_Profile_Profile","test","hash","src_Callback_Callback","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4f49dccb.chunk.js","sourcesContent":["module.exports = {\r\n    COMMUNITY_CHAT:\"COMMUNITY_CHAT\",\r\n    USER_CONNECTED:\"USER_CONNECTED\",\r\n    MESSAGE_RECIEVED:\"MESSAGE_RECIEVED\",\r\n    MESSAGE_SENT:\"MESSAGE_SENT\",\r\n    USER_DISCONNECTED:\"USER_DISCONNECTED\",\r\n    TYPING:\"TYPING\",\r\n    VERIFY_USER:\"VERIFY_USER\",\r\n    LOGOUT:\"LOGOUT\",\r\n    PRIVATE_MESSAGE: \"PRIVATE_MESSAGE\",\r\n    NEW_CHAT_USER: \"NEW_CHAT_USER\",\r\n    GAME_UPDATE: \"GAME_UPDATE\",\r\n    CURRENTPLAYS: \"CURRENTPLAYS\"\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\n// horse\r\n\r\nclass App extends Component {\r\n\r\n\r\n  goTo(route) {\r\n    this.props.history.replace(`/${route}`)\r\n  }\r\n\r\n  login() {\r\n    this.props.auth.login();\r\n  }\r\n\r\n  logout() {\r\n    this.props.auth.logout();\r\n  }\r\n\r\n  render() {\r\n    const { isAuthenticated } = this.props.auth;\r\n\r\n    return (\r\n      \r\n      <div>\r\n\r\n          {\r\n              !isAuthenticated() && (\r\n                \r\n                <div className=\"hero\">\r\n                <h1>Cards Against Humaity</h1>\r\n                <div className=\"flip-card\">\r\n                  <div className=\"flip-card-inner\">\r\n                    <div className=\"flip-card-front\">\r\n                      <h1>Let the Fun Begin</h1>\r\n                  <button className=\"flip-card-button\" onClick={this.login.bind(this)} id=\"qsLoginBtn\">Log in | Sign Up</button>\r\n                    </div>\r\n                    <div className=\"flip-card-back\">\r\n                      <h1>Cards</h1> \r\n                      <h1>Against</h1> \r\n                      <h1>Humanity</h1>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                  </div>\r\n                  \r\n                )\r\n            }\r\n            {\r\n              isAuthenticated() && (\r\n              <div>\r\n              <div className=\"navbar\" id=\"homeid\">\r\n              <div className=\"linkBox\">\r\n              <div className=\"link\" onClick={this.goTo.bind(this, 'home')}>Cards Against Humanity</div>\r\n\r\n                <div className=\"link\" onClick={this.logout.bind(this)}>Log Out</div>\r\n                </div>\r\n                </div>\r\n                </div>\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\nimport decks from '../data/decks';\r\nimport {USER_CONNECTED, GAME_UPDATE, CURRENTPLAYS} from '../Events';\r\nimport './Game.css'\r\n\r\nexport default class Game extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state ={\r\n      blackCards: \"\",\r\n      whiteCards: \"\",\r\n      cards: [],\r\n      players: [],\r\n      names:[\"john\", \"dave\", \"sven\"],\r\n      dealer: \"\",\r\n      cardsinplay: [],\r\n      score: [],\r\n      gameInProgress: false\r\n    }\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n\r\n \r\n  \r\n\r\n  componentWillMount() {\r\n    if (this.state.cards.length === 0){\r\n    this.setState({\r\n      cards: decks\r\n    })\r\n  }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { socket } = this.props\r\n    this.initSocket(socket)\r\n\r\n  }\r\n\r\n  // makes initial connection to socket for component\r\n\r\n  initSocket = (socket) => {\r\n    socket.on('connect', () => {\r\n    })\r\n    \r\n    socket.on(GAME_UPDATE, (game) => {\r\n        this.setState(game)\r\n    })\r\n    \r\n    socket.on(CURRENTPLAYS, (currentUsers) => {\r\n      this.setState({\r\n        names: currentUsers\r\n      })\r\n    })\r\n}\r\n\r\n  handleSubmit(event) {\r\n\r\n  event.preventDefault()\r\n}\r\n\r\nsetUser = (user) => {\r\n  const {socket} = this.state\r\n  socket.emit(USER_CONNECTED, user);\r\n  this.setState({user})\r\n  console.log(user.name)\r\n}\r\n\r\nhandleChange(e) {\r\n  this.setState({\r\n    userInput: e.target.value\r\n  });\r\n  e.preventDefault()\r\n}\r\n\r\n// Initially deal out cards according to names in state\r\ndeal = () => {\r\n  \r\n  this.setState({\r\n    blackCards: decks[0].blackCards,\r\n    whiteCards: decks[0].whiteCards,\r\n    gameInProgress: true\r\n  }, () => {\r\n    \r\n    var numOfPlayers = this.state.names.length\r\n\r\n    let playersObj = []\r\n   \r\n    const blackMax = this.state.blackCards.length-1;\r\n   let blackSelect = Math.floor(Math.random() * blackMax);\r\n   let currentText = this.state.blackCards[blackSelect].text;\r\n   let currentPick = this.state.blackCards[blackSelect].pick;\r\n   let a = this.state.whiteCards \r\n   \r\n   // shuffle function for stack of cards \r\n   for (let i = a.length - 1; i > 0; i--) {\r\n     const j = Math.floor(Math.random() * (i + 1));\r\n     [a[i], a[j]] = [a[j], a[i]];\r\n   }\r\n   \r\n    for (let i = 0; i<numOfPlayers; i++) {\r\n   \r\n       let playerCardsArray = a.slice(0,7)\r\n       a.splice(0,7)\r\n   \r\n       this.setState({\r\n         whiteCards: a\r\n       })\r\n         \r\n       playersObj.push({\r\n         name: this.state.names[i].id,\r\n         id:this.state.names[i].name,\r\n         picture: this.state.names[i].picture,\r\n         cardsInHand: playerCardsArray,\r\n         score: 0,\r\n         bcardPick: currentPick,\r\n         bCard: currentText,\r\n         dealer: false,\r\n         turn: 1\r\n       })\r\n     }\r\n     playersObj[0].dealer = true\r\n   \r\n     this.setState({\r\n       players: playersObj\r\n     }, () => {\r\n      const { socket } = this.props\r\n      let game = this.state\r\n      socket.emit(GAME_UPDATE, game)\r\n     })\r\n   })\r\n}\r\n\r\n// play available cards in the amount derived from numPicks\r\n\r\nplaycard = (i, index, winner, numPicks) => {\r\n  let newCards = this.state.players\r\n\r\n  let playerChecker= this.state.cardsinplay\r\n  \r\n\r\n  if (numPicks > 0){  \r\n\r\n    // no cards yet played\r\n    if (playerChecker.length === 0) {\r\n      this.state.cardsinplay.push({ name: [this.state.players[index].cardsInHand[i]], \r\n        playerIndex: index,\r\n        cardOwner: winner})\r\n        newCards[index].bcardPick--\r\n    }\r\n    else {\r\n\r\n      let hasPlayedCard \r\n      let pCheckIdx\r\n    for(let j=0; j< playerChecker.length; j++){\r\n      // playing second card for user\r\n      if (playerChecker[j].playerIndex === index) {\r\n        hasPlayedCard = true\r\n        pCheckIdx = j\r\n        j = playerChecker.length + 1\r\n      } \r\n      else {\r\n        hasPlayedCard = false\r\n      }\r\n    }\r\n      // playing first card when cards are already in play\r\n      if (hasPlayedCard) {\r\n        if (newCards[index].bcardPick > 0) {\r\n          playerChecker[pCheckIdx].name.push(this.state.players[index].cardsInHand[i])\r\n          newCards[index].bcardPick--\r\n          \r\n        } \r\n        else {\r\n        }\r\n        \r\n      } else {\r\n        this.state.cardsinplay.push({ name: [this.state.players[index].cardsInHand[i]], \r\n          playerIndex: index,\r\n          cardOwner: winner})\r\n          newCards[index].bcardPick--\r\n        }  \r\n  }\r\n    \r\n\r\n  \r\n    newCards[index].cardsInHand.splice(i,1)\r\n\r\n    this.setState({\r\n      players: newCards\r\n    }, () => {\r\n      const { socket } = this.props\r\n      let game = this.state\r\n      socket.emit(GAME_UPDATE, game)\r\n    })\r\n}\r\n};\r\n\r\n// Create object to update scores with forloop then setstate with created variable playerScore and pushes new cards into hand\r\n\r\nupdateScore = (player) => {\r\n\r\n  let newCards = this.state.players\r\n\r\n  const blackMax = this.state.blackCards.length-1;\r\n  let blackSelect = Math.floor(Math.random() * blackMax);\r\n  let currentText = this.state.blackCards[blackSelect].text;\r\n  let currentPick = this.state.blackCards[blackSelect].pick;\r\n  \r\n  // resets dealer\r\n\r\nfor(let j=0; j<newCards.length; j++){\r\n  if(newCards[j].turn === newCards.length) {\r\n    newCards[j].turn= 1\r\n    newCards[j].dealer = false\r\n    newCards[0].dealer= true\r\n  } else{\r\n    if ( newCards[j].turn < newCards.length && newCards[j].turn === j) {\r\n      newCards[j].turn++\r\n      newCards[j].dealer = true\r\n    } else {\r\n      newCards[j].turn++\r\n      newCards[j].dealer = false\r\n    }\r\n    }\r\n    }\r\n  \r\n// resets picks for players so they are allowed to pick cards on next turn\r\n  \r\n  for(let k=0; k<newCards.length; k++) {\r\n    \r\n    newCards[k].bcardPick = currentPick\r\n    newCards[k].bCard = currentText\r\n  }\r\n\r\n// adds point to players score and deploys modal to reset the game and scores when a players score reaches 7(winning score)\r\n\r\nlet playerScore = this.state.players.map(i => i)\r\n\r\nfor(let i=0; i < playerScore.length; i++) {\r\n  if (playerScore[i].name === player) {\r\n    playerScore[i].score++\r\n    if(playerScore[i].score ===7) {\r\n      console.log(playerScore[i].name + \"wonnnnnn\")\r\n    }\r\n  }\r\n\r\n  // redeals number of cards necessary after all cards are played \r\n\r\n  let x\r\n  for (x in newCards) {\r\n    if (newCards[x].cardsInHand.length < 7) {\r\n      newCards[x].cardsInHand.push(this.state.whiteCards.splice(0,7 - newCards[x].cardsInHand.length))\r\n    }\r\n  }\r\n\r\n  this.setState({\r\n    players: newCards,\r\n    cardsinplay: []\r\n  })\r\n   \r\n\r\n}\r\n\r\n// need to increment the dealer by 1 here\r\n\r\nthis.setState({\r\n  players: playerScore\r\n}, () => {\r\n  const { socket } = this.props\r\n  console.log(this.state.players)\r\n  let game = this.state\r\n  socket.emit(GAME_UPDATE, game)\r\n})\r\n}\r\n\r\ncardsinplay = (playerName) => {\r\n  let smoke = this.state.cardsinplay\r\n\r\n  for (let i =0; i <this.state.smoke.length; i++) {\r\n    if (smoke[i].name === playerName) {\r\n\r\n    }\r\n  }\r\n}\r\n\r\n  render() { \r\n    const { socket } = this.props\r\n    let mySocketID = socket.id\r\n    \r\n\r\n    // Show current cards in play to dealer to pick\r\n    let pickACard = \r\n  <div>\r\n    <h1>Cards In Play</h1>\r\n    <h3>(You Are the Dealer)</h3>\r\n    {  \r\n  this.state.cardsinplay.map((pickedCard, index) => \r\n    <div>\r\n      <div className=\"cardOutline\" key={index}>\r\n        <div className=\"cardInner\">\r\n          <div className=\"cardFrame-back\">Cards Against Humanity</div>\r\n            <div className=\"cardFrame-front\">\r\n              <div className=\"cardName\">\r\n                  {pickedCard.name}\r\n              </div>\r\n                <button className=\"winnerButton\" onClick={() => this.updateScore(pickedCard.cardOwner)}>\r\n                    Pick a Winner \r\n                </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n    }\r\n    </div>\r\n\r\n    // show current cards in play to non-dealer so they can see other cards in play\r\n\r\n  let nonDealerPicks = \r\n  <div>\r\n  <h1>Cards In Play</h1>\r\n  {  \r\n  this.state.cardsinplay.map((pickedCard, index) => \r\n  <div>\r\n    <div className=\"cardOutline\" key={index}>\r\n      <div className=\"cardInner\">\r\n        <div className=\"cardFrame-back\">Cards Against Humanity</div>\r\n          <div className=\"cardFrame-front\">\r\n            <div className=\"cardName\">\r\n                {pickedCard.name}\r\n            </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\n  }\r\n  </div>\r\n\r\n  // displays scores of all players\r\n  const scoreKeeper = this.state.players.map(i => \r\n    <div key={i.name}>{i.id}: {i.score}</div>\r\n    )\r\n\r\n  // display/logic of all players displays and layouts\r\n    const currentCards = \r\n    \r\n    this.state.players.map((i, index) =>   \r\n    i.name === mySocketID ? \r\n    <div key={index}>\r\n            <div className=\"cardFrame\">\r\n            <div className=\"score\">\r\n            {scoreKeeper}\r\n            </div>\r\n\r\n<div className=\"whiteCardBox\"> \r\n            { i.dealer === true ?\r\n          <div>\r\n            <div className=\"dealerPicks\">{pickACard}</div> \r\n            {\r\n            i.cardsInHand.map((card, white) => \r\n            <div>            \r\n                  <div key={white + 1} className=\"cardOutline\">\r\n                          <div className=\"cardInner\">\r\n                              <div className=\"cardFrame-back\">Cards Against Humanity</div>\r\n                                    <div className=\"cardFrame-front\">\r\n                                        <div className=\"cardName\">\r\n                                          { card }\r\n                                        </div>\r\n                              </div>\r\n                          </div>\r\n                  </div>\r\n            </div>\r\n            )\r\n            }\r\n\r\n<div className=\"cardOutline\" key={index}>\r\n      <div className=\"blackCardInner\">\r\n        <div className=\"cardFrame-back\">Cards Against Humanity</div>\r\n          <div className=\"cardFrame-front\">\r\n            <div className=\"cardName\">\r\n                <div>{i.bCard}</div>\r\n                <div>Pick: {i.bcardPick}</div>\r\n            </div>\r\n        </div>\r\n      </div>\r\n  </div>\r\n          </div>\r\n            : \r\n            <div>\r\n            <div className=\"dealerPicks\">{nonDealerPicks}</div> \r\n            {\r\n            i.cardsInHand.map((card, white) =>\r\n              <div key={white + 1} className=\"cardOutline\">\r\n                <div className=\"cardInner\">\r\n                    <div className=\"cardFrame-back\">Cards Against Humanity</div>\r\n                          <div className=\"cardFrame-front\">\r\n                              <div className=\"cardName\">\r\n                                { card }\r\n                              </div>\r\n                                <button id= { white + \": \" + index } \r\n                                className=\"pickButton\"  \r\n                                onClick={() => this.playcard(white, index, i.name, i.bcardPick)}>\r\n                                Play Card\r\n                                </button>\r\n                    </div>\r\n                </div>\r\n              </div>\r\n           \r\n            )\r\n            }\r\n<div className=\"cardOutline\" key={index}>\r\n      <div className=\"blackCardInner\">\r\n        <div className=\"cardFrame-back\">Cards Against Humanity</div>\r\n          <div className=\"cardFrame-front\">\r\n            <div className=\"cardName\">\r\n                <div>{i.bCard}</div>\r\n                <div>Pick: {i.bcardPick}</div>\r\n            </div>\r\n        </div>\r\n      </div>\r\n  </div>\r\n            </div>\r\n            }\r\n</div>\r\n            </div>\r\n          </div>\r\n          : <div key={index}></div>\r\n          );\r\n\r\n\r\n// displays currently signed in player in top right along with avatar picture\r\n  const heading = this.state.names.map((i, index) => \r\n  i.id === mySocketID ?\r\n  <div key={index}>\r\n  <div className=\"playerName\">{i.name}</div>\r\n  <img className=\"playerPic\" src={i.picture} alt={i.id + `'s avatar`}></img>\r\n  </div>\r\n  : null\r\n  \r\n  )\r\n\r\n  // displays all players currently signed into game \r\n    const inGamePlayers = this.state.names.map((i,index) => \r\n     <div key={index + 22}>{i.name}</div> )\r\n  \r\n    \r\n    return (\r\n      <div className=\"gameContainer\">\r\n        { this.state.gameInProgress ? null :\r\n          <div className=\"game-flip-card\">\r\n            <div className=\"game-flip-card-inner\">\r\n              <div className=\"game-flip-card-front\">\r\n\r\n                <div className=\"heroGame\">\r\n                  <h1>Players In Game</h1>\r\n                  <div>{inGamePlayers}</div>\r\n                </div>\r\n            \r\n    {this.state.names.length < 3 ? \r\n      <div>\r\n        <h1>You need {3 - this.state.names.length} more players to begin</h1>\r\n      </div>                                   \r\n  :\r\n    <div>\r\n      <div>\r\n        <h1>Would you like to start?</h1> \r\n          <button onClick={this.deal} className=\"pickButton\">Deal cards</button>\r\n      </div>\r\n    </div>\r\n  }\r\n  \r\n        </div>\r\n        <div className=\"game-flip-card-back\">\r\n          <h1>Cards</h1> \r\n          <h1>Against</h1> \r\n          <h1>Humanity</h1>\r\n        </div>\r\n      </div>\r\n    </div>\r\n        }\r\n\r\n  <div>{heading}</div>\r\n  <div>{currentCards}</div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport io from 'socket.io-client';\r\nimport {USER_CONNECTED, LOGOUT, CURRENTPLAYS} from '../Events';\r\n// import Sidebar from './Sidebar'\r\nimport './Home.css';\r\nimport Game from '../Game/Game';\r\nimport axios from 'axios'\r\n\r\n\r\nconst socketUrl = \"/home\"\r\n\r\nclass Home extends Component {\r\n  \r\n    constructor(props) {\r\n      super(props);\r\n    \r\n      this.state = {\r\n                socket: null, \r\n                user: null,\r\n                allPlayers: [{\r\n                  name: \"buddy\",\r\n                  id: \"noid\",\r\n                  picture: \"https://accounts.google.com/SignOutOptions?hl=en&continue=https://www.google.com/_/chrome/newtab%3Fei%3DTzxeXM25L7Kt_Qanya_wCQ%26rlz%3D1C1JZAP_enUS715US715\"\r\n                }],\r\n                profile: \"hello\"\r\n      };\r\n      }\r\n  \r\n\r\n      componentWillMount() {\r\n        const socket = io(socketUrl)\r\n  \r\n//         const addUserName = async () => { const res = await axios.get('wild-rice-5480.auth0.com', { headers: {\"Authorization\" : `Bearer ${localStorage.access_token}`}})\r\n//         return await res.data;\r\n// }\r\n    \r\n    \r\n    socket.on(\"connect\", () => {\r\n      console.log(socket.id)\r\n      // addUserName().then(name => {\r\n        let plays = {\r\n          name: \"buddy\",\r\n          id: socket.id,\r\n          picture: \"https://accounts.google.com/SignOutOptions?hl=en&continue=https://www.google.com/_/chrome/newtab%3Fei%3DTzxeXM25L7Kt_Qanya_wCQ%26rlz%3D1C1JZAP_enUS715US715\"\r\n        }\r\n          this.setState({\r\n            profile: \"buddy\"\r\n          })           \r\n\r\nsocket.emit(CURRENTPLAYS, plays)\r\n      // })\r\n      \r\n    })\r\n\r\n    socket.on(\"disconnect\", () => {\r\n     let removeUserArr = this.state.allPlayers\r\n      for(let i=0; i < removeUserArr.length; i++) {\r\n        if (removeUserArr[i].id === socket.id) {\r\n          removeUserArr.splice(i,1)\r\n        }\r\n      }\r\n      this.setState({\r\n        allPlayers: removeUserArr\r\n      })\r\n      \r\n    })\r\n    \r\n        this.setState({'socket': socket\r\n      })\r\n      }\r\n\r\n      componentDidMount() {\r\n        const {socket} = this.state  \r\n        this.setState({\r\n         user: socket.id\r\n       })\r\n\r\n\r\n       socket.on(CURRENTPLAYS, (currentUsers) => {\r\n        this.setState({\r\n          allPlayers: currentUsers\r\n        })\r\n      })\r\n      }\r\n\r\n\r\n      \r\n      socketUser = () => {\r\n        axios.get('https://snydz.auth0.com/userinfo', { headers: {\"Authorization\" : `Bearer ${localStorage.access_token}`}})\r\n    .then(response => this.setState({profile: response.data.name}))\r\n    }\r\n  \r\n      setUser = (user) => {\r\n          const {socket} = this.state\r\n          socket.emit(USER_CONNECTED, user);\r\n          this.setState({user})\r\n\r\n  \r\n      }\r\n\r\n      checkstate = () => {\r\n        console.log(this.state)\r\n      }\r\n  \r\n      logout = ()=> {\r\n          const {socket} = this.state\r\n          socket.emit(LOGOUT)\r\n          this.setState({user:null})\r\n      }\r\n  \r\n      render() {\r\n      const { socket } = this.state\r\n      let { allPlayers } = this.state\r\n      return (\r\n        <div className=\"homeContainer\">\r\n              {this.state.user === null ? <div>sign in</div> : \r\n                  <Game socket={socket} currentUsers={allPlayers}/> \r\n              }\r\n              \r\n                  </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport { Panel, ControlLabel, Glyphicon } from 'react-bootstrap';\r\n// import './Profile.css';\r\n\r\nclass Profile extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state ={\r\n      profile: ''\r\n    }\r\n  }\r\n  componentWillMount() {\r\n    this.setState({ profile: {} });\r\n    const { userProfile, getProfile } = this.props.auth;\r\n    if (!userProfile) {\r\n      getProfile((err, profile) => {\r\n        this.setState({ profile });\r\n      });\r\n    } else {\r\n      this.setState({ profile: userProfile });\r\n    }\r\n  }\r\n  render() {\r\n    const { profile } = this.state;\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"profile-area\">\r\n          <h1>{profile.name}</h1>\r\n          <Panel header=\"Profile\">\r\n            <img src={profile.picture} alt=\"profile\" />\r\n            <div>\r\n              <ControlLabel><Glyphicon glyph=\"user\" /> Nickname</ControlLabel>\r\n              <h3>{profile.nickname}</h3>\r\n            </div>\r\n            <pre>{JSON.stringify(profile, null, 2)}</pre>\r\n          </Panel>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Profile;","import React, { Component } from 'react';\r\n\r\nclass Callback extends Component {\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <div>I am loading ...</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Callback;","import createHistory from 'history/createBrowserHistory'\r\n\r\nexport default createHistory()","export const AUTH_CONFIG = {\r\n    domain: 'wild-rice-5480.auth0.com',\r\n    clientId: 'VSnsm6g1T2YGC9YKNwyBeL_pkC0ThXFa',\r\n    callbackUrl: 'https://cardsapplication.herokuapp.com/callback'\r\n  }","import React from 'react';\r\nimport { Redirect, Route, Router } from 'react-router-dom';\r\nimport App from './App';\r\nimport Home from './Home/Home';\r\nimport Profile from './Profile/Profile';\r\nimport Callback from './Callback/Callback';\r\nimport Auth from './Auth/Auth';\r\nimport history from './history';\r\n\r\nconst auth = new Auth();\r\n\r\nconst handleAuthentication = ({location}) => {\r\n  if (/access_token|id_token|error/.test(location.hash)) {\r\n    auth.handleAuthentication();\r\n  }\r\n}\r\n\r\nexport const makeMainRoutes = () => {\r\n  return (\r\n      <Router history={history}>\r\n        <div>\r\n          <Route path=\"/\" render={(props) => <App auth={auth} {...props} />} />\r\n          <Route path=\"/home\" render={(props) => (\r\n            !auth.isAuthenticated() ? (<Redirect to=\"/\"/>) : (\r\n            <Home auth={auth} {...props} />\r\n            ))} />\r\n            <Route path=\"/profile\" render={(props) => (\r\n            !auth.isAuthenticated() ? (<Redirect to=\"/\"/>) : (\r\n            <Profile auth={auth} {...props} />\r\n            ))} />\r\n          <Route path=\"/callback\" render={(props) => {\r\n            handleAuthentication(props);\r\n            return <Callback {...props} /> \r\n          }}/>\r\n        </div>\r\n      </Router>\r\n  );\r\n}","import history from '../history';\r\nimport auth0 from 'auth0-js';\r\nimport { AUTH_CONFIG } from './auth0-variables';\r\n\r\n\r\nexport default class Auth {\r\n  auth0 = new auth0.WebAuth({\r\n    domain: AUTH_CONFIG.domain,\r\n    clientID: AUTH_CONFIG.clientId,\r\n    redirectUri: AUTH_CONFIG.callbackUrl,\r\n    responseType: 'token id_token',\r\n    scope: 'openid profile email'\r\n  });\r\n\r\n  userProfile;\r\n\r\n  constructor() {\r\n    this.login = this.login.bind(this);\r\n    this.logout = this.logout.bind(this);\r\n    this.handleAuthentication = this.handleAuthentication.bind(this);\r\n    this.isAuthenticated = this.isAuthenticated.bind(this);\r\n    this.getProfile = this.getProfile.bind(this);\r\n  }\r\n\r\n\r\n  login() {\r\n    this.auth0.authorize();\r\n  }\r\n\r\n  handleAuthentication() {\r\n    this.auth0.parseHash((err, authResult) => {\r\n      if (authResult && authResult.accessToken && authResult.idToken) {\r\n        this.setSession(authResult);\r\n        history.replace('/home');\r\n      } else if (err) {\r\n        history.replace('/home');\r\n        console.log(err);\r\n        alert(`Error: ${err.error}. Check the console for further details.`);\r\n      }\r\n    });\r\n  }\r\n\r\n  getProfile(cb) {\r\n    console.log(this.auth0.client)\r\n    this.auth0.client.userInfo(this.accessToken, (err, profile) => {\r\n      if (profile) {\r\n        this.userProfile = profile;\r\n      }\r\n      cb(err, profile);\r\n    });\r\n  }\r\n\r\n  setSession(authResult) {\r\n    // Set the time that the access token will expire at\r\n    let expiresAt = JSON.stringify((authResult.expiresIn * 1000) + new Date().getTime());\r\n    localStorage.setItem('access_token', authResult.accessToken);\r\n    localStorage.setItem('id_token', authResult.idToken);\r\n    localStorage.setItem('expires_at', expiresAt);\r\n    // navigate to the home route\r\n    history.replace('/home');\r\n  }\r\n\r\n  logout() {\r\n    // Clear access token and ID token from local storage\r\n    localStorage.removeItem('access_token');\r\n    localStorage.removeItem('id_token');\r\n    localStorage.removeItem('expires_at');\r\n    this.userProfile = null;\r\n    // navigate to the home route\r\n    history.replace('/home');\r\n  }\r\n\r\n  isAuthenticated() {\r\n    // Check whether the current time is past the \r\n    // access token's expiry time\r\n    let expiresAt = JSON.parse(localStorage.getItem('expires_at'));\r\n    return new Date().getTime() < expiresAt;\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { makeMainRoutes } from './routes';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst routes = makeMainRoutes();\r\n\r\nReactDOM.render(\r\n  routes,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}